pipeline {
    agent any
    
    environment {
        DOCKER_IMAGE = 'petclinic-app'
        DOCKER_TAG = "${env.BUILD_NUMBER}"
    }
    
    stages {
        stage('Checkout') {
            steps {
                echo 'üîÑ R√©cup√©ration du code source...'
                checkout scm
            }
        }
        
        stage('Build with Maven') {
            steps {
                echo 'üî® Compilation du projet...'
                sh '''
                    chmod +x ./mvnw
                    ./mvnw clean package -DskipTests
                '''
            }
        }
        
        stage('Test') {
            steps {
                echo 'üß™ Ex√©cution des tests...'
                sh '''
                    ./mvnw test
                '''
            }
            post {
                always {
                    junit '**/target/surefire-reports/*.xml'
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                echo 'üê≥ Construction de l\'image Docker...'
                sh '''
                    docker build -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                    docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                '''
            }
        }
        
        stage('Deploy') {
            steps {
                echo 'üöÄ D√©ploiement de l\'application...'
                sh '''
                    # Arr√™ter le conteneur existant s'il existe
                    docker stop petclinic || true
                    docker rm petclinic || true
                    
                    # D√©marrer le nouveau conteneur
                    docker run -d \
                        --name petclinic \
                        --network test-compose_app-network \
                        -p 8080:8080 \
                        ${DOCKER_IMAGE}:${DOCKER_TAG}
                '''
            }
        }
    }
    
    post {
        success {
            echo '‚úÖ Pipeline ex√©cut√© avec succ√®s!'
            echo 'üåê Application accessible sur http://localhost:8080'
        }
        failure {
            echo '‚ùå Le pipeline a √©chou√©'
        }
        always {
            echo 'üßπ Nettoyage...'
            sh 'docker system prune -f || true'
        }
    }
}
